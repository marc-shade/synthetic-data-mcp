# Default values for synthetic-data-mcp
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: synthetic-data-mcp
  version: "0.1.0"
  
# Image configuration
image:
  registry: docker.io
  repository: synthetic-data-mcp
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Pod configuration
  podAnnotations: {}
  podLabels: {}
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  
  # Container configuration
  containerPort: 3000
  metricsPort: 9090
  
  # Environment variables
  env:
    SYNTHETIC_DATA_LOG_LEVEL: "INFO"
    SYNTHETIC_DATA_PRIVACY_MODE: "LOCAL"
    MAX_WORKERS: "4"
    REQUEST_TIMEOUT: "300"
    MAX_RECORD_COUNT: "100000"
    PROMETHEUS_ENABLED: "true"
  
  # Resource limits and requests
  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
    limits:
      memory: "4Gi"
      cpu: "2000m"
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  metricsPort: 9090
  annotations: {}

# Load balancer service (optional)
loadBalancer:
  enabled: false
  type: LoadBalancer
  annotations: {}
  
# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  
  hosts:
    - host: synthetic-data.example.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: synthetic-data-tls
      hosts:
        - synthetic-data.example.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  
  # Advanced scaling behavior
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 4
          periodSeconds: 60
        - type: Percent
          value: 50
          periodSeconds: 60

# Persistent storage
persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  annotations: {}

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Pod Security Policy
podSecurityPolicy:
  enabled: false

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Secrets configuration
secrets:
  # External secret management integration
  externalSecrets:
    enabled: false
    backendType: vault  # vault, aws, azure, gcp
    vaultRole: ""
    
  # Manual secret values (not recommended for production)
  values: {}
    # openaiApiKey: ""
    # apiKey: ""
    # jwtSecret: ""
    # encryptionKey: ""
    # dbPassword: ""

# ConfigMaps
configMaps:
  app:
    SYNTHETIC_DATA_HOME: "/app"
    SYNTHETIC_DATA_CACHE_DIR: "/app/cache"
    SYNTHETIC_DATA_DATA_DIR: "/app/data"
    SYNTHETIC_DATA_LOGS_DIR: "/app/logs"

# PostgreSQL dependency configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    database: "synthetic_data"
    username: "synthetic"
    password: ""
  primary:
    persistence:
      enabled: true
      size: 100Gi
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m

# Redis dependency configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m

# Nginx load balancer
nginx:
  enabled: true
  replicas: 2
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 500m
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 60

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      path: /metrics
  
  grafana:
    enabled: true
    dashboards:
      enabled: true

# Ollama configuration (optional local LLM)
ollama:
  enabled: false
  image:
    repository: ollama/ollama
    tag: latest
    pullPolicy: IfNotPresent
  
  models:
    - llama3.1:8b
    - mistral:7b
  
  resources:
    requests:
      memory: 8Gi
      cpu: 2000m
    limits:
      memory: 16Gi
      cpu: 4000m
  
  persistence:
    enabled: true
    size: 200Gi

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node affinity and tolerations
affinity: {}
nodeSelector: {}
tolerations: []

# Pod priority
priorityClassName: ""

# Additional labels and annotations
commonLabels: {}
commonAnnotations: {}