version: '3.8'

services:
  synthetic-data-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    image: synthetic-data-mcp:latest
    container_name: synthetic-data-mcp
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # Application settings
      - SYNTHETIC_DATA_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SYNTHETIC_DATA_DB_PATH=/app/data/audit.db
      - SYNTHETIC_DATA_CACHE_DIR=/app/cache
      
      # LLM Configuration (Priority: Ollama -> OpenAI -> Fallback)
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.1:8b}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - SYNTHETIC_DATA_PRIVACY_MODE=${PRIVACY_MODE:-LOCAL}
      
      # Security settings
      - API_KEY=${API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Performance settings
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}
      - MAX_RECORD_COUNT=${MAX_RECORD_COUNT:-100000}
      
      # Monitoring
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
    volumes:
      - synthetic-data:/app/data
      - synthetic-logs:/app/logs
      - synthetic-cache:/app/cache
    networks:
      - synthetic-network
    depends_on:
      - redis
      - postgres
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  redis:
    image: redis:7-alpine
    container_name: synthetic-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - synthetic-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: synthetic-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=synthetic_data
      - POSTGRES_USER=${DB_USER:-synthetic}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - synthetic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-synthetic}"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: synthetic-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - synthetic-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: synthetic-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - synthetic-network
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: synthetic-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-cache:/var/cache/nginx
    networks:
      - synthetic-network
    depends_on:
      - synthetic-data-mcp

  ollama:
    image: ollama/ollama:latest
    container_name: synthetic-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_FLASH_ATTENTION=1
    volumes:
      - ollama-models:/root/.ollama/models
      - ollama-data:/root/.ollama
    networks:
      - synthetic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          # Ollama can use significant resources for local inference
          cpus: '4'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 8G
    # Enable GPU support if available (uncomment for NVIDIA GPU)
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    #   - NVIDIA_DRIVER_CAPABILITIES=compute,utility

networks:
  synthetic-network:
    driver: bridge

volumes:
  synthetic-data:
  synthetic-logs:
  synthetic-cache:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  nginx-cache:
  ollama-models:
  ollama-data: