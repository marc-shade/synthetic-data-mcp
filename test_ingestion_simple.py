#!/usr/bin/env python3
"""
Simple test to verify the new ingestion capabilities without server dependencies.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_dynamic_knowledge():
    """Test that hardcoded knowledge has been replaced with dynamic loading."""
    print("\n" + "="*80)
    print("TESTING DYNAMIC KNOWLEDGE LOADING")
    print("="*80)
    
    # Import the knowledge loader
    from synthetic_data_mcp.ingestion.knowledge_loader import DynamicKnowledgeLoader
    
    knowledge_loader = DynamicKnowledgeLoader()
    
    # Test healthcare knowledge generation (should be empty/dynamic)
    healthcare_knowledge = knowledge_loader.get_healthcare_knowledge()
    print(f"\n‚úÖ Healthcare knowledge type: {type(healthcare_knowledge)}")
    print(f"   Keys: {list(healthcare_knowledge.keys())}")
    
    # Check that it's not hardcoded
    if healthcare_knowledge.get("common_conditions"):
        if len(healthcare_knowledge["common_conditions"]) > 0:
            print("‚ùå ERROR: Found hardcoded healthcare conditions!")
            return False
    else:
        print("‚úÖ No hardcoded healthcare conditions found")
    
    # Test finance knowledge generation (should be empty/dynamic)  
    finance_knowledge = knowledge_loader.get_finance_knowledge()
    print(f"\n‚úÖ Finance knowledge type: {type(finance_knowledge)}")
    print(f"   Keys: {list(finance_knowledge.keys())}")
    
    # Check that it's not hardcoded
    if finance_knowledge.get("spending_patterns", {}).get("age_groups"):
        if len(finance_knowledge["spending_patterns"]["age_groups"]) > 0:
            print("‚ùå ERROR: Found hardcoded finance patterns!")
            return False
    else:
        print("‚úÖ No hardcoded finance patterns found")
    
    print("\n‚úÖ SUCCESS: All knowledge is dynamically loaded, no hardcoded data!")
    return True


def test_pattern_analyzer():
    """Test the pattern analyzer with sample data."""
    print("\n" + "="*80)
    print("TESTING PATTERN ANALYZER")
    print("="*80)
    
    import pandas as pd
    from synthetic_data_mcp.ingestion.pattern_analyzer import PatternAnalyzer
    
    # Create sample data
    sample_data = [
        {"id": i, "value": i * 10, "category": f"cat_{i % 3}", "score": 50 + i}
        for i in range(10)
    ]
    
    analyzer = PatternAnalyzer()
    
    # Test structure analysis
    structure = analyzer.analyze_structure(sample_data)
    print(f"\n‚úÖ Structure analysis completed:")
    print(f"   Columns: {list(structure['columns'].keys())}")
    print(f"   Row count: {structure['statistics']['row_count']}")
    
    # Test distribution learning
    distributions = analyzer.learn_distributions(sample_data)
    print(f"\n‚úÖ Distribution learning completed:")
    for col, dist in distributions.items():
        if isinstance(dist, dict) and 'mean' in dist:
            print(f"   {col}: mean={dist['mean']:.2f}")
    
    # Test business rules extraction
    rules = analyzer.extract_business_rules(sample_data)
    print(f"\n‚úÖ Business rules extraction completed:")
    print(f"   Found {len(rules.get('validations', []))} validation rules")
    
    return True


def test_data_ingestion():
    """Test the data ingestion pipeline."""
    print("\n" + "="*80)
    print("TESTING DATA INGESTION PIPELINE")
    print("="*80)
    
    import asyncio
    from synthetic_data_mcp.ingestion.data_ingestion import DataIngestionPipeline
    from synthetic_data_mcp.privacy.engine import PrivacyEngine
    
    async def run_ingestion():
        # Initialize pipeline
        privacy_engine = PrivacyEngine()
        pipeline = DataIngestionPipeline(privacy_engine)
        
        # Test data
        test_data = [
            {
                "name": f"Person {i}",
                "email": f"person{i}@example.com",
                "age": 20 + i,
                "salary": 50000 + i * 1000
            }
            for i in range(5)
        ]
        
        print(f"\n‚úÖ Created {len(test_data)} test records")
        
        # Test ingestion
        result = await pipeline.ingest(
            source=test_data,
            format="dict",
            anonymize=True,
            learn_patterns=True
        )
        
        print(f"\n‚úÖ Ingestion completed:")
        print(f"   Pattern ID: {result.get('pattern_id')}")
        print(f"   Rows ingested: {result.get('rows_ingested')}")
        print(f"   Columns: {result.get('columns')}")
        
        # Check PII detection
        pii_report = result.get('pii_report', {})
        if pii_report.get('detected_columns'):
            print(f"   PII detected: {pii_report['detected_columns']}")
            print(f"   Anonymization applied: {list(pii_report.get('anonymization_applied', {}).keys())}")
        
        return True
    
    # Run the async test
    return asyncio.run(run_ingestion())


def verify_no_hardcoded_in_generator():
    """Verify the generator no longer uses hardcoded knowledge."""
    print("\n" + "="*80)
    print("VERIFYING GENERATOR HAS NO HARDCODED DATA")
    print("="*80)
    
    # Read the generator file and check for removed methods
    with open('src/synthetic_data_mcp/core/generator.py', 'r') as f:
        generator_content = f.read()
    
    # Check that old hardcoded methods are removed
    if '_load_healthcare_knowledge' in generator_content and 'return {' in generator_content:
        # Check if it returns hardcoded data
        if '"Type 2 diabetes mellitus"' in generator_content:
            print("‚ùå ERROR: Found hardcoded healthcare data in generator!")
            return False
    
    if '_load_finance_knowledge' in generator_content and 'return {' in generator_content:
        # Check if it returns hardcoded data  
        if '"18-24": {"entertainment": 0.15' in generator_content:
            print("‚ùå ERROR: Found hardcoded finance data in generator!")
            return False
    
    print("‚úÖ Generator uses DynamicKnowledgeLoader")
    print("‚úÖ No hardcoded data found in generator")
    
    # Check that new methods are present
    if 'learn_from_data' in generator_content:
        print("‚úÖ Found learn_from_data method")
    else:
        print("‚ùå ERROR: Missing learn_from_data method")
        return False
        
    if 'generate_from_pattern' in generator_content:
        print("‚úÖ Found generate_from_pattern method")
    else:
        print("‚ùå ERROR: Missing generate_from_pattern method")
        return False
    
    return True


def main():
    """Run all tests."""
    print("\n" + "="*80)
    print("SYNTHETIC DATA MCP - VERIFICATION TESTS")
    print("="*80)
    
    tests = [
        ("Dynamic Knowledge Loading", test_dynamic_knowledge),
        ("Pattern Analyzer", test_pattern_analyzer),
        ("Data Ingestion Pipeline", test_data_ingestion),
        ("Generator Verification", verify_no_hardcoded_in_generator)
    ]
    
    results = []
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚ùå ERROR in {name}: {str(e)}")
            results.append((name, False))
    
    # Summary
    print("\n" + "="*80)
    print("TEST SUMMARY")
    print("="*80)
    
    all_passed = True
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{name}: {status}")
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ ALL TESTS PASSED! The system is working correctly.")
        print("\nKey achievements:")
        print("1. ‚úÖ Removed all hardcoded data")
        print("2. ‚úÖ Implemented dynamic knowledge loading")
        print("3. ‚úÖ Added real data ingestion capabilities")
        print("4. ‚úÖ Pattern learning from user samples")
        print("5. ‚úÖ PII anonymization during ingestion")
        print("6. ‚úÖ Pattern-based synthetic generation")
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the errors above.")
    
    print("="*80 + "\n")


if __name__ == "__main__":
    main()